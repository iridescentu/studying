import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 백준 11726: 2×n 타일링
        // ---------------------------------------------------------
        // * DP 사용
        // * 2×n 크기의 직사각형을 1×2, 2×1 타일로 채우는 방법의 수를 구하는 문제
        // * dp[n]을 2×n 크기의 직사각형을 채우는 방법의 수라고 정의
        // * dp[n]은 dp[n-1]과 dp[n-2]의 합으로 구할 수 있음
        // * 왜냐하면, 마지막에 오는 타일이 1×2 타일일 경우 (dp[n-1]),
        //   또는 2×1 타일 2개일 경우 (dp[n-2])로 나눌 수 있기 때문
        // * dp 배열을 사용하여 점화식을 통해 값을 채워 나감
        // * 마지막으로 10,007로 나눈 나머지를 출력
        // ---------------------------------------------------------

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        // 1. n이 1일 때는 방법의 수가 1, n이 2일 때는 방법의 수가 2이므로 초기값 설정
        if (n == 1) {
            System.out.println(1);
            return;
        }
        if (n == 2) {
            System.out.println(2);
            return;
        }

        // 2. 동적 계획법을 위한 배열 dp 선언 및 초기화
        int[] dp = new int[n + 1];
        dp[1] = 1; // 2×1 크기 직사각형을 채우는 방법의 수
        dp[2] = 2; // 2×2 크기 직사각형을 채우는 방법의 수

        // 3. 점화식을 이용하여 dp 배열 채우기
        for (int i = 3; i <= n; i++) {
            dp[i] = (dp[i-1] + dp[i-2]) % 10007; // 모듈러 연산을 통해 결과값을 10,007로 나눈 나머지를 저장
        }

        // 4. 결과 출력
        System.out.println(dp[n]);
    }
}