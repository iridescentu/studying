import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 백준 24267: 알고리즘 수업 - 알고리즘의 수행 시간 6
        // -----------------------------------------------------------
        // * 사용된 개념과 접근법
        // - 이 문제는 알고리즘의 수행 시간을 분석하는 문제이며, 특히 중첩된 for 루프의 실행 횟수를 계산해야 한다.
        // - 중첩된 for 루프의 경우, 바깥쪽 루프에서 설정된 변수에 따라 안쪽 루프의 실행 횟수가 달라진다.
        // - 이 경우, 세 개의 for 루프가 있으며, 각각 i, j, k를 변수로 사용한다. 이들의 범위는 서로 종속적이다.
        // - 코드1의 실행 횟수는 이 중첩된 루프가 몇 번 실행되는가에 달려 있다.
        // ---------------------------------------------------------
        // * 풀이 방식
        // - 각 i에 대해 가능한 j의 수를 계산하고, 각 j에 대해 가능한 k의 수를 계산한다.
        // - i가 1일 때, j의 가능한 값은 n-2개이며, 각 j에 대해 가능한 k의 값은 j와 n 사이의 값이다.
        // - 이를 일반화하면, 코드1의 실행 횟수는 조합론적 접근을 통해 계산할 수 있다.
        // ---------------------------------------------------------
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.close();

        // nC3를 계산하기 위해 필요한 값 계산
        // ----------------------------------------------------------
        // 코드 1 수행 횟수는 nC3 (n개 중 3개를 선택하는 경우의 수)와 같음
        // nC3 = n * (n - 1) * (n - 2) / 6
        // ----------------------------------------------------------
        long count = (long) n * (n - 1) * (n - 2) / 6;

        // 첫 번째 줄: 코드 1의 수행 횟수
        System.out.println(count);

        // 두 번째 줄: 알고리즘의 최고차항 차수
        // n^3 형태의 다항식이므로 차수는 3
        System.out.println(3);
    }
}